<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/task  
			http://www.springframework.org/schema/task/spring-task-3.0.xsd" 
            default-autowire="byName">

	<!-- 启动springmvc的注解映射功能 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
        <property name="order" value="1" />
    </bean>
    <!-- 启动springmvc的注解功能 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
	
	<context:annotation-config />
    
    <context:component-scan base-package="*" />
    <tx:annotation-driven transaction-manager="transactionManager"/>
    
    <task:annotation-driven/> 
    
    
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    	<property name="locations">
    		<list>
    			<value>classpath:jdbc.properties</value>
    		</list>
    	</property>
    </bean>
    
    
    <!-- 配置数据源  -->
	 <bean id="masterDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		  <property name="driverClass"><value>${master.jdbc.driverClassName}</value></property>
		  <property name="jdbcUrl"><value>${master.jdbc.url}</value></property>
		  <property name="user"><value>${master.jdbc.username}</value></property>
		  <property name="password"><value>${master.jdbc.password}</value></property>
		  <property name="initialPoolSize"><value>${jdbc.initialPoolSize}</value></property>
		  <property name="minPoolSize"><value>${jdbc.minPoolSize}</value></property>
		  <property name="maxPoolSize"><value>${jdbc.maxPoolSize}</value></property>
		  <property name="acquireIncrement">    
            <value>5</value>    
          </property>
          <!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0   -->  
          <property name="maxIdleTime">    
            <value>60</value>    
          </property> 
          <!-- 每60秒检查所有连接池中的空闲连接。Default: 0    --> 
          <property name="idleConnectionTestPeriod">    
            <value>60</value>    
          </property> 
	 </bean>
	    
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
    	<property name="dataSource" ref="masterDataSource">
    	</property>
    	<property name="hibernateProperties">
    		<props>
    			<prop key="hibernate.dialect">${hibernate.dialect}</prop>
    			<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
    			<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
    			<prop key="hibernate.jdbc.fetch_size">80</prop>
   				<prop key="hibernate.jdbc.batch_size">35</prop>
  				<prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
    			<!-- 配置二级缓存 -->
				<prop key="hibernate.cache.use_second_level_cache">
				true
				</prop>
				<prop key="hibernate.cache.use_query_cache">
				true
				</prop>
				<!-- 配置二级缓存的相应的类 -->
				<prop key="hibernate.cache.provider_class">
				org.hibernate.cache.HashtableCacheProvider
				</prop>
    		</props>
    	</property>
    	<!-- <property name="packagesToScan" value="com.myself.wb.entity"></property> -->
    	<property name="packagesToScan">
    		<list>
        		<value>com.jufengniao.master.entity</value>
    		</list>
    	</property>
    </bean>
    
    <bean name="openSessionInViewInterceptor"
	class="org.springframework.orm.hibernate3.support.OpenSessionInViewInterceptor">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
		<property name="flushMode" value="1"/>
		<property name="singleSession" value="true" />
	</bean> 
    <!-- 切换数据源 -->   
    <!--  <bean id="dataSourceAdvice" class="aop.DataSourceAdvice" />   
    <aop:config>   
        <aop:advisor   
            pointcut="execution(* dao..*Dao.*(..))"   
            advice-ref="dataSourceAdvice" />   
    </aop:config>  -->
    
	
	<!-- 定义事务管理器（声明式的事务） -->  
    <bean id="transactionManager"
        class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    
     <!--配置事务的传播特性 -->  
     <tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <tx:attributes>  
            <tx:method name="add*" propagation="REQUIRED" />  
            <tx:method name="create*" propagation="REQUIRED" />  
            <tx:method name="save*" propagation="REQUIRED" />  
            <tx:method name="edit*" propagation="REQUIRED" />  
            <tx:method name="update*" propagation="REQUIRED" />  
            <tx:method name="delete*" propagation="REQUIRED" />  
            <tx:method name="remove*" propagation="REQUIRED" /> 
            <tx:method name="find*" read-only="true"/> 
            <tx:method name="get*" read-only="true"/>
			<tx:method name="*"/>
           <!--  <tx:method name="loadByUsername*" propagation="SUPPORTS" read-only="true" />  
            <tx:method name="*" propagation="SUPPORTS" read-only="true" />   -->
        </tx:attributes>  
    </tx:advice>   
    
    <!--那些类的哪些方法参与事务 -->  
    <aop:config>  

        <!-- <aop:advisor  
            pointcut="execution(* service..*ServiceImpl.*(..))"  
            advice-ref="txAdvice" />   -->
            
       <aop:pointcut id="affectMethods"
    	expression="execution(* com.jufengniao.master.*.*(..))) )"  />
   <aop:advisor advice-ref="txAdvice" pointcut-ref="affectMethods" />
    </aop:config>
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>

	<!-- Aspect -->
	<bean id="logAspect" class="com.jufengniao.master.log.LogAspect" />
		
</beans>
